{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\kodio\\\\Desktop\\\\ctf\\\\screens\\\\LoginScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport theme from \"../theme.js\";\nimport firebase from 'firebase';\nimport { useNavigation } from '@react-navigation/native';\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  var _super = _createSuper(LoginScreen);\n\n  function LoginScreen() {\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: '',\n      password: ''\n    };\n\n    _this.signUp = function _callee() {\n      var email, password;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              email = String(_this.state.email).trim();\n              password = String(_this.state.password).trim();\n              firebase.auth().createUserWithEmailAndPassword(email, password).then(function () {\n                Alert.alert('Account creation successful', 'User account created & signed in!');\n              }).catch(function (error) {\n                if (error.code === 'auth/email-already-in-use') {\n                  Alert.alert('Already in use', 'That email address is already in use!');\n                }\n\n                if (error.code === 'auth/invalid-email') {\n                  Alert.alert('Invalid email', 'That email address is invalid!');\n                }\n\n                console.error(error);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        placeholder: \"Enter email\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            email: text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }), React.createElement(TextInput, {\n        placeholder: \"Password\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            password: text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Submit\",\n        onPress: (this.signUp, useNavigation().navigate('WelcomeScreen')),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nexport { LoginScreen as default };\nLoginScreen.navigationOptions = {\n  header: null\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.colors.primary.background,\n    alignItems: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/kodio/Desktop/ctf/screens/LoginScreen.js"],"names":["WebBrowser","React","theme","firebase","useNavigation","LoginScreen","state","email","password","signUp","String","trim","auth","createUserWithEmailAndPassword","then","Alert","alert","catch","error","code","console","styles","container","text","setState","navigate","Component","navigationOptions","header","StyleSheet","create","flex","backgroundColor","colors","primary","background","alignItems"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;;;;;AAEA,OAAOC,KAAP;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,aAAT,QAA8B,0BAA9B;;IAEqBC,W;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AACKC,MAAAA,QAAQ,EAAE;AADf,K;;UAGRC,M,GAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AACDF,cAAAA,KADC,GACOG,MAAM,CAAC,MAAKJ,KAAL,CAAWC,KAAZ,CAAN,CAAyBI,IAAzB,EADP;AAEDH,cAAAA,QAFC,GAEUE,MAAM,CAAC,MAAKJ,KAAL,CAAWE,QAAZ,CAAN,CAA4BG,IAA5B,EAFV;AAGPR,cAAAA,QAAQ,CAACS,IAAT,GAAgBC,8BAAhB,CAA+CN,KAA/C,EAAsDC,QAAtD,EACgBM,IADhB,CACqB,YAAM;AACTC,gBAAAA,KAAK,CAACC,KAAN,CAAY,6BAAZ,EACY,mCADZ;AAED,eAJjB,EAKiBC,KALjB,CAKuB,UAAAC,KAAK,EAAI;AACd,oBAAIA,KAAK,CAACC,IAAN,KAAe,2BAAnB,EAAgD;AAC9CJ,kBAAAA,KAAK,CAACC,KAAN,CAAY,gBAAZ,EACY,uCADZ;AAED;;AAED,oBAAIE,KAAK,CAACC,IAAN,KAAe,oBAAnB,EAAyC;AACvCJ,kBAAAA,KAAK,CAACC,KAAN,CAAY,eAAZ,EACY,gCADZ;AAED;;AAEDI,gBAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,eAjBjB;;AAHO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAuBA;AAAA;;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACA,QAAA,WAAW,EAAC,aADZ;AAEA,QAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,iBAAU,MAAI,CAACC,QAAL,CAAc;AAACjB,YAAAA,KAAK,EAAEgB;AAAR,WAAd,CAAV;AAAA,SAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,SAAD;AACA,QAAA,WAAW,EAAC,UADZ;AAEA,QAAA,YAAY,EAAE,sBAACA,IAAD;AAAA,iBAAU,MAAI,CAACC,QAAL,CAAc;AAAChB,YAAAA,QAAQ,EAAEe;AAAX,WAAd,CAAV;AAAA,SAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,EASE,oBAAC,MAAD;AACA,QAAA,KAAK,EAAC,QADN;AAEA,QAAA,OAAO,GAAE,KAAKd,MAAL,EAAaL,aAAa,GAAGqB,QAAhB,CAAyB,eAAzB,CAAf,CAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CADF;AAgBD;;;;EA5CsCxB,KAAK,CAACyB,S;;SAA1BrB,W;AA+CrBA,WAAW,CAACsB,iBAAZ,GAAgC;AAC9BC,EAAAA,MAAM,EAAE;AADsB,CAAhC;AAIA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,SAAS,EAAE;AACTS,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE9B,KAAK,CAAC+B,MAAN,CAAaC,OAAb,CAAqBC,UAF7B;AAGTC,IAAAA,UAAU,EAAE;AAHH;AADoB,CAAlB,CAAf","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\r\nimport * as React from 'react';\r\nimport {  TextInput, View, Button, Platform, StyleSheet, Alert } from 'react-native';\r\nimport theme from '../theme.js';\r\nimport firebase from 'firebase';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nexport default class LoginScreen extends React.Component {\r\n  state = {\r\n    email: '', password: ''\r\n  }\r\n  signUp = async () => {\r\n    const email = String(this.state.email).trim();\r\n    const password = String(this.state.password).trim();\r\n    firebase.auth().createUserWithEmailAndPassword(email, password)\r\n                   .then(() => {\r\n                      Alert.alert('Account creation successful',\r\n                                  'User account created & signed in!');\r\n                    })\r\n                    .catch(error => {\r\n                      if (error.code === 'auth/email-already-in-use') {\r\n                        Alert.alert('Already in use',\r\n                                    'That email address is already in use!');\r\n                      }\r\n\r\n                      if (error.code === 'auth/invalid-email') {\r\n                        Alert.alert('Invalid email',\r\n                                    'That email address is invalid!');\r\n                      }\r\n\r\n                      console.error(error);\r\n                    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <TextInput\r\n        placeholder=\"Enter email\"\r\n        onChangeText={(text) => this.setState({email: text})}>\r\n        </TextInput>\r\n        <TextInput\r\n        placeholder=\"Password\"\r\n        onChangeText={(text) => this.setState({password: text})}>\r\n        </TextInput>\r\n        <Button\r\n        title='Submit'\r\n        onPress={this.signUp, useNavigation().navigate('WelcomeScreen')}>\r\n        </Button>\r\n    </View>\r\n    );\r\n  }\r\n}\r\n\r\nLoginScreen.navigationOptions = {\r\n  header: null,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.colors.primary.background,\r\n    alignItems: 'center'\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}