{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _apolloClient = require(\"apollo-client\");\n\nvar _apolloCacheInmemory = require(\"apollo-cache-inmemory\");\n\nvar _apolloLinkHttp = require(\"apollo-link-http\");\n\nvar _apolloLinkError = require(\"apollo-link-error\");\n\nvar _apolloLink = require(\"apollo-link\");\n\nvar _apolloLinkContext = require(\"apollo-link-context\");\n\nvar _asyncStorage = _interopRequireDefault(require(\"@react-native-community/async-storage\"));\n\nvar _config = _interopRequireDefault(require(\"./config\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar httpLink = new _apolloLinkHttp.HttpLink({\n  uri: _config.default.graphqlUrl,\n  credentials: 'include'\n});\nvar afterwareLink = new _apolloLink.ApolloLink(function (operation, forward) {\n  return forward(operation).map(function (response) {\n    var _operation$getContext = operation.getContext(),\n        headers = _operation$getContext.response.headers;\n\n    var token = headers.get('x-token');\n\n    if (token) {\n      _asyncStorage.default.setItem('token', token);\n    }\n\n    return response;\n  });\n});\nvar middlewareLink = (0, _apolloLinkContext.setContext)(function _callee(_, _ref) {\n  var headers, token, newHeaders;\n  return _regenerator.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          headers = _ref.headers;\n          _context.next = 3;\n          return _regenerator.default.awrap(_asyncStorage.default.getItem('token'));\n\n        case 3:\n          token = _context.sent;\n          newHeaders = token ? _objectSpread({}, headers, {\n            authorization: \"Bearer \" + token\n          }) : _objectSpread({}, headers);\n          return _context.abrupt(\"return\", {\n            headers: newHeaders\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar errorLink = (0, _apolloLinkError.onError)(function () {});\nvar client = new _apolloClient.ApolloClient({\n  cache: new _apolloCacheInmemory.InMemoryCache(),\n  link: _apolloLink.ApolloLink.from([afterwareLink, middlewareLink, errorLink, httpLink])\n});\nvar _default = client;\nexports.default = _default;","map":{"version":3,"sources":["/Users/az/Documents/CODE/contact-tracing/contact-tracing-front/src/client.js"],"names":["httpLink","HttpLink","uri","config","graphqlUrl","credentials","afterwareLink","ApolloLink","operation","forward","map","response","getContext","headers","token","get","AsyncStorage","setItem","middlewareLink","_","getItem","newHeaders","authorization","errorLink","client","ApolloClient","cache","InMemoryCache","link","from"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAG,IAAIC,wBAAJ,CAAa;AAC5BC,EAAAA,GAAG,EAAEC,gBAAOC,UADgB;AAE5BC,EAAAA,WAAW,EAAE;AAFe,CAAb,CAAjB;AAKA,IAAMC,aAAa,GAAG,IAAIC,sBAAJ,CAAe,UAACC,SAAD,EAAYC,OAAZ;AAAA,SAAwBA,OAAO,CAACD,SAAD,CAAP,CAC1DE,GAD0D,CACtD,UAAAC,QAAQ,EAAI;AAAA,gCACmBH,SAAS,CAACI,UAAV,EADnB;AAAA,QACKC,OADL,yBACPF,QADO,CACKE,OADL;;AAEf,QAAMC,KAAK,GAAGD,OAAO,CAACE,GAAR,CAAY,SAAZ,CAAd;;AAEA,QAAID,KAAJ,EAAW;AACTE,4BAAaC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACD;;AAED,WAAOH,QAAP;AACD,GAV0D,CAAxB;AAAA,CAAf,CAAtB;AAYA,IAAMO,cAAc,GAAG,mCAAW,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYN,UAAAA,OAAZ,QAAYA,OAAZ;AAAA;AAAA,4CACZG,sBAAaI,OAAb,CAAqB,OAArB,CADY;;AAAA;AAC1BN,UAAAA,KAD0B;AAG1BO,UAAAA,UAH0B,GAGbP,KAAK,qBAEjBD,OAFiB;AAGpBS,YAAAA,aAAa,cAAYR;AAHL,iCAKjBD,OALiB,CAHQ;AAAA,2CAWzB;AACLA,YAAAA,OAAO,EAAEQ;AADJ,WAXyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAX,CAAvB;AAgBA,IAAME,SAAS,GAAG,8BAAQ,YAAM,CAG/B,CAHiB,CAAlB;AAKA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,KAAK,EAAE,IAAIC,kCAAJ,EADuB;AAE9BC,EAAAA,IAAI,EAAErB,uBAAWsB,IAAX,CAAgB,CACpBvB,aADoB,EAEpBY,cAFoB,EAGpBK,SAHoB,EAIpBvB,QAJoB,CAAhB;AAFwB,CAAjB,CAAf;eAUewB,M","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport { onError } from 'apollo-link-error'\nimport { ApolloLink } from 'apollo-link'\nimport { setContext } from 'apollo-link-context'\nimport AsyncStorage from '@react-native-community/async-storage'\nimport config from './config'\n\nconst httpLink = new HttpLink({\n  uri: config.graphqlUrl,\n  credentials: 'include',\n})\n\nconst afterwareLink = new ApolloLink((operation, forward) => forward(operation)\n  .map(response => {\n    const { response: { headers } } = operation.getContext()\n    const token = headers.get('x-token')\n\n    if (token) {\n      AsyncStorage.setItem('token', token)\n    }\n\n    return response\n  }))\n\nconst middlewareLink = setContext(async (_, { headers }) => {\n  const token = await AsyncStorage.getItem('token')\n\n  const newHeaders = token\n    ? {\n      ...headers,\n      authorization: `Bearer ${token}`,\n    } : {\n      ...headers,\n    }\n\n  return {\n    headers: newHeaders,\n  }\n})\n\nconst errorLink = onError(() => {\n  // Handle specific errors here\n  //   e.g. redirect to login on AuthenticationError\n})\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([\n    afterwareLink,\n    middlewareLink,\n    errorLink,\n    httpLink,\n  ]),\n})\n\nexport default client\n"]},"metadata":{},"sourceType":"script"}